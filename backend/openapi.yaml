openapi: 3.0.3
info:
  title: AMused Product Management API
  description: AI-powered product management system with real-time notifications
  version: 2.0.0
  contact:
    name: AMused Team
    email: support@amused.com

servers:
  - url: http://localhost:4000
    description: Development server

security:
  - ApiKeyAuth: []

paths:
  /products:
    get:
      summary: List products
      description: Get paginated list of products with filtering
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: search
          in: query
          schema:
            type: string
        - name: category
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
    
    post:
      summary: Create product
      description: Create a new product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /products/{id}:
    put:
      summary: Update product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponse'
        '404':
          $ref: '#/components/responses/NotFound'
    
    delete:
      summary: Delete product
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          $ref: '#/components/responses/NotFound'

  /events/stream:
    get:
      summary: Event stream
      description: Server-Sent Events stream for real-time updates
      parameters:
        - name: x-seller-id
          in: header
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Event stream
          content:
            text/event-stream:
              schema:
                type: string
                example: |
                  event: ProductCreated
                  data: {"type":"ProductCreated","sellerId":"seller123","productId":1,"product":{"id":1,"name":"Test Product"}}

  /ai/recommendations/{productId}:
    get:
      summary: Get AI recommendations
      description: Get AI-powered product recommendations
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: AI recommendations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AIRecommendationsResponse'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-seller-id

  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        seller_id:
          type: string
        name:
          type: string
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          format: decimal
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        category:
          type: string
          maxLength: 50
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    CreateProductRequest:
      type: object
      required:
        - name
        - price
        - quantity
        - category
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          format: decimal
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        category:
          type: string
          minLength: 1
          maxLength: 50

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        price:
          type: number
          format: decimal
          minimum: 0
        quantity:
          type: integer
          minimum: 0
        category:
          type: string
          minLength: 1
          maxLength: 50

    ApiResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
        message:
          type: string
        error:
          type: string

    ProductResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Product'

    ProductListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Product'

    AIRecommendationsResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                productId:
                  type: integer
                recommendations:
                  type: array
                  items:
                    type: object
                    properties:
                      productId:
                        type: integer
                      name:
                        type: string
                      confidence:
                        type: number
                        format: decimal

    SuccessResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error: "Validation failed"

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error: "Unauthorized"

    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiResponse'
          example:
            success: false
            error: "Product not found"